{"version":3,"sources":["components/showCPS.tsx","components/ControlPanel.tsx","App.tsx","index.tsx"],"names":["ShowCPS","result","cpsRevealed","Col","clicks","time","calcCPS","RESULTS","ControlPanel","results","setResults","reveal","leaderboard","setLeaderboard","useState","count","setCount","timer","setTimer","setCPS","isDisabled","setIsDisabled","isActive","setIsActive","isStopped","setIsStopped","handleStop","newResult","useEffect","document","title","className","Button","onClick","increment","setInterval","clearInterval","disabled","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"qOAGO,SAASA,EAAT,GAA8F,IAA5EC,EAA2E,EAA3EA,OAAQC,EAAmE,EAAnEA,YAM7B,OAAO,eAACC,EAAA,EAAD,WACH,sBACCD,GAAe,kDAPpB,SAAiBD,GAGb,OADMA,EAAOG,OAAOH,EAAOI,KAKUC,CAAQL,S,oBCPjDM,EAAmB,GAEhB,SAASC,EAAT,GAEU,IAFaC,EAEd,EAFcA,QAASC,EAEvB,EAFuBA,WAAYC,EAEnC,EAFmCA,OAAQC,EAE3C,EAF2CA,YAAaC,EAExD,EAFwDA,eAGpE,EAA0BC,mBAAS,GAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAsBJ,mBAAiBP,EAAQ,IAA/C,mBAAYY,GAAZ,WACA,EAAoCL,oBAAS,GAA7C,mBAAOM,EAAP,KAAmBC,EAAnB,KACA,EAAgCP,oBAAS,GAAzC,mBAAOQ,EAAP,KAAiBC,EAAjB,KACA,EAAkCT,oBAAS,GAA3C,mBAAOU,EAAP,KAAkBC,EAAlB,KAOA,IAeMC,EAAa,WAnBnB,IAAmBC,IAoBL,CAAEtB,KAAM,GAAID,OAAQW,GAnB9BF,EAAe,GAAD,mBAAKD,GAAL,CAAkBe,KAoBhCjB,EAAWD,EAAU,GACrBU,EAAOP,EAAYH,IACnBE,GAAO,GACPU,GAAc,GACdE,GAAY,GACZE,GAAa,GACbP,EAAS,IAab,OAVAU,qBAAU,WAEN,GADAC,SAASC,MAAT,sBAAgCf,EAAhC,UACIE,GAAS,GAAKK,EACd,OAAO,kBAAMI,KAEbT,EAAQ,GACRC,EAAS,MAIV,eAACf,EAAA,EAAD,WACH,4BAAIc,IACJ,6CAAgBF,EAAhB,aACA,sBAAKgB,UAAU,UAAf,UACI,cAACC,EAAA,EAAD,CAAQC,QAxCI,WAChBf,EAAS,IACTF,EAAS,GACTK,GAAc,GACdE,GAAY,GACZZ,GAAO,GACP,IAAMuB,EAAYC,aAAY,WAC1BjB,GAAS,SAACD,GAAD,OAAWA,EAAQ,OAC7B,KACCO,GACAY,cAAcF,GAElBT,GAAa,IA4BT,mBACA,cAACO,EAAA,EAAD,CAAQK,SAAUjB,EAAYa,QAAS,kBAAMjB,EAASD,EAAM,IAA5D,4B,UCvDRR,EAAmB,GAqBR+B,MAnBf,WACE,MAA8BxB,oBAAS,GAAvC,mBAAOZ,EAAP,KAAoBS,EAApB,KACA,EAA8BG,oBAAU,GAAxC,mBAAOL,EAAP,KAAgBC,EAAhB,KACA,EAAsCI,mBAAmBP,GAAzD,mBAAOK,EAAP,KAAoBC,EAApB,KAEA,OACE,sBAAKkB,UAAU,MAAf,UACE,cAACvB,EAAD,CACEC,QAASA,EACTC,WAAYA,EACZC,OAAQA,EACRC,YAAaA,EACbC,eAAgBA,IAElB,cAACb,EAAD,CAASC,OAAQW,EAAYH,GAAUP,YAAaA,QClB1DqC,IAASC,OACL,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFZ,SAASa,eAAe,W","file":"static/js/main.5bac7694.chunk.js","sourcesContent":["import { Col } from 'react-bootstrap';\r\nimport { Result } from '../interfaces/result';\r\n\r\nexport function ShowCPS({result, cpsRevealed}: {result: Result, cpsRevealed: boolean}): JSX.Element {\r\n    function calcCPS(result: Result) {\r\n        let cps: number;\r\n        cps = result.clicks/result.time;\r\n        return cps;\r\n    }\r\n    return <Col>\r\n        <p></p>\r\n        {cpsRevealed && <p>You got a CPS of {calcCPS(result)}</p>}\r\n    </Col>\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { Result } from '../interfaces/result';\r\nimport { Col, Button } from 'react-bootstrap';\r\n\r\nlet RESULTS:Result[] = [];\r\n\r\nexport function ControlPanel({results, setResults, reveal, leaderboard, setLeaderboard}: {\r\n    results: number, setResults: (rs: number) => void, reveal: (r: boolean) => void, leaderboard: Result[], setLeaderboard: (l: Result[]) => void\r\n}): JSX.Element {\r\n    const [count, setCount] = useState(0);\r\n    const [timer, setTimer] = useState(15);\r\n    const [cps, setCPS] = useState<Result>(RESULTS[0] as Result);\r\n    const [isDisabled, setIsDisabled] = useState(true);\r\n    const [isActive, setIsActive] = useState(false);\r\n    const [isStopped, setIsStopped] = useState(false);\r\n    \r\n\r\n    function addResult(newResult: Result) {\r\n        setLeaderboard([...leaderboard, newResult]);\r\n    }\r\n\r\n    const handleStart = () => {\r\n        setTimer(15);\r\n        setCount(0);\r\n        setIsDisabled(false);\r\n        setIsActive(true);\r\n        reveal(false);\r\n        const increment = setInterval(() => {\r\n            setTimer((timer) => timer - 1);\r\n        }, 1000);\r\n        if (isStopped) {\r\n            clearInterval(increment);\r\n        }\r\n        setIsStopped(false);\r\n    }\r\n\r\n    const handleStop = () => {\r\n        addResult({ time: 15, clicks: count });\r\n        setResults(results + 1);\r\n        setCPS(leaderboard[results]);\r\n        reveal(true);\r\n        setIsDisabled(true);\r\n        setIsActive(false);\r\n        setIsStopped(true);\r\n        setTimer(0);\r\n    }\r\n\r\n    useEffect(() => {\r\n        document.title = `You clicked ${count} times`\r\n        if (timer <= 0 && isActive) {\r\n            return () => handleStop();\r\n        }\r\n        if (timer < 0) {\r\n            setTimer(0);\r\n        }\r\n    });\r\n\r\n    return <Col>\r\n        <p>{timer}</p>\r\n        <p>You clicked {count} times!</p>\r\n        <div className=\"buttons\">\r\n            <Button onClick={handleStart}>Start</Button>\r\n            <Button disabled={isDisabled} onClick={() => setCount(count+1)}>\r\n                Click me\r\n            </Button>\r\n        </div>\r\n    </Col>\r\n}","import './App.css';\r\nimport React, { useState } from 'react';\r\nimport { Result } from './interfaces/result';\r\nimport { ShowCPS } from './components/showCPS';\r\nimport { ControlPanel } from './components/ControlPanel';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nlet RESULTS:Result[] = [];\r\n\r\nfunction App(): JSX.Element {\r\n  const [cpsRevealed, reveal] = useState(false);\r\n  const [results, setResults] = useState(-1);\r\n  const [leaderboard, setLeaderboard] = useState<Result[]>(RESULTS);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <ControlPanel \r\n        results={results}\r\n        setResults={setResults}\r\n        reveal={reveal}\r\n        leaderboard={leaderboard}\r\n        setLeaderboard={setLeaderboard}\r\n      ></ControlPanel>\r\n      <ShowCPS result={leaderboard[results]} cpsRevealed={cpsRevealed}></ShowCPS>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n  );\r\n  \r\n  // If you want to start measuring performance in your app, pass a function\r\n  // to log results (for example: reportWebVitals(console.log))\r\n  // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n"],"sourceRoot":""}