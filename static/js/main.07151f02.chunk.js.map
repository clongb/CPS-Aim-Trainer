{"version":3,"sources":["components/showCPS.tsx","App.tsx","index.tsx"],"names":["ShowCPS","result","cpsRevealed","Col","Math","trunc","clicks","time","RESULTS","App","useState","count","setCount","timer","setTimer","cps","setCPS","isDisabled","setIsDisabled","setIsActive","reveal","useEffect","document","title","className","onClick","setInterval","disabled","ReactDOM","render","StrictMode","getElementById"],"mappings":"0OAGO,SAASA,EAAT,GAA8F,IAA5EC,EAA2E,EAA3EA,OAAQC,EAAmE,EAAnEA,YAM7B,OAAO,cAACC,EAAA,EAAD,UACFD,GAAe,kDANpB,WAGI,OADME,KAAKC,MAAMJ,EAAOK,OAAOL,EAAOM,YCD9C,IAAIC,EAAmB,GAwDRC,MAtDf,WACE,MAA0BC,mBAAS,GAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAsBJ,mBAAiBF,EAAQ,IAA/C,mBAAOO,EAAP,KAAYC,EAAZ,KACA,EAAoCN,oBAAS,GAA7C,mBAAOO,EAAP,KAAmBC,EAAnB,KACA,EAAgCR,oBAAS,GAAzC,mBAAiBS,GAAjB,WACA,EAA8BT,oBAAS,GAAvC,mBAAOR,EAAP,KAAoBkB,EAApB,KACA,EAAsCV,mBAAmBF,GAAzD,mBAgCA,OAhCA,UAwBAa,qBAAU,WAER,GADAC,SAASC,MAAT,sBAAgCZ,EAAhC,UACGE,GAAS,EACV,OAAO,kBAVTG,EAAO,CAACT,KAAM,GAAKD,OAAQK,IAC3BO,GAAc,GACdC,GAAY,GACZC,GAAO,QACPN,EAAS,OAYT,sBAAKU,UAAU,MAAf,UACE,4BAAIX,IACJ,6CAAgBF,EAAhB,aACA,sBAAKa,UAAU,UAAf,UACE,wBAAQC,QA/BM,WAClBb,EAAS,GACTM,GAAc,GACdC,GAAY,GACZC,GAAO,GACWM,aAAY,WAC5BZ,GAAS,SAACD,GAAD,OAAWA,EAAQ,OAC3B,MAwBC,mBACA,wBAAQc,SAAUV,EAAYQ,QAAS,kBAAMb,EAASD,EAAM,IAA5D,yBAIF,cAACX,EAAD,CAASC,OAAQc,EAAKb,YAAaA,QCnDzC0B,IAASC,OACL,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFR,SAASS,eAAe,W","file":"static/js/main.07151f02.chunk.js","sourcesContent":["import { Col } from 'react-bootstrap';\r\nimport { Result } from '../interfaces/result';\r\n\r\nexport function ShowCPS({result, cpsRevealed}: {result: Result, cpsRevealed: boolean}): JSX.Element {\r\n    function calcCPS(){\r\n        let cps: number;\r\n        cps = Math.trunc(result.clicks/result.time);\r\n        return cps;\r\n    }\r\n    return <Col>\r\n        {cpsRevealed && <p>You got a CPS of {calcCPS}</p>}\r\n    </Col>\r\n}","import './App.css';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Result } from './interfaces/result';\r\nimport { ShowCPS } from './components/showCPS';\r\n\r\nlet RESULTS:Result[] = [];\r\n\r\nfunction App(): JSX.Element {\r\n  const [count, setCount] = useState(0);\r\n  const [timer, setTimer] = useState(15);\r\n  const [cps, setCPS] = useState<Result>(RESULTS[0] as Result);\r\n  const [isDisabled, setIsDisabled] = useState(true);\r\n  const [isActive, setIsActive] = useState(false);\r\n  const [cpsRevealed, reveal] = useState(false);\r\n  const [leaderboard, setLeaderboard] = useState<Result[]>(RESULTS);\r\n\r\n  function addResult(newResult: Result) {\r\n    setLeaderboard([...leaderboard, newResult]);\r\n  }\r\n\r\n  const handleStart = () => {\r\n    setCount(0);\r\n    setIsDisabled(false);\r\n    setIsActive(true);\r\n    reveal(false);\r\n    const increment = setInterval(() => {\r\n      setTimer((timer) => timer - 1);\r\n    }, 1000);\r\n  }\r\n\r\n  const handleStop = () => {\r\n    setCPS({time: 15 , clicks: count});\r\n    setIsDisabled(true);\r\n    setIsActive(false);\r\n    reveal(true);\r\n    setTimer(0);\r\n  }\r\n\r\n  useEffect(() => {\r\n    document.title = `You clicked ${count} times`\r\n    if(timer <= 0){\r\n      return () => handleStop();\r\n      \r\n    }\r\n  });\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <p>{timer}</p>\r\n      <p>You clicked {count} times!</p>\r\n      <div className=\"buttons\">\r\n        <button onClick={handleStart}>Start</button>\r\n        <button disabled={isDisabled} onClick={() => setCount(count+1)}>\r\n            Click me\r\n        </button>\r\n      </div>\r\n      <ShowCPS result={cps} cpsRevealed={cpsRevealed}></ShowCPS>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n  );\r\n  \r\n  // If you want to start measuring performance in your app, pass a function\r\n  // to log results (for example: reportWebVitals(console.log))\r\n  // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n"],"sourceRoot":""}